---------DATAFRAME EXECUTION PLAN----------
Query List:
1.
SELECT "TRANSACTION_ID", "TX_DATETIME" AS "TX_DATETIME", "CUSTOMER_ID" AS "CUSTOMER_ID", "l_hp82_TERMINAL_ID" AS "TERMINAL_ID", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_AMOUNT", "TX_FRAUD", "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND", "TX_DURING_NIGHT", "CUST_AVG_AMOUNT_1", "CUST_CNT_TX_1", "CUST_AVG_AMOUNT_7", "CUST_CNT_TX_7", "CUST_AVG_AMOUNT_30", "CUST_CNT_TX_30", ("NB_TX_DELAY_WINDOW_1" - "NB_TX_DELAY") AS "NB_TX_WINDOW_1", iff((("NB_FRAUD_DELAY_WINDOW_1" - "NB_FRAUD_DELAY") > 0 :: INT), (("NB_FRAUD_DELAY_WINDOW_1" - "NB_FRAUD_DELAY") / "NB_TX_WINDOW_1"), 0) AS "TERM_RISK_1", ("NB_TX_DELAY_WINDOW_7" - "NB_TX_DELAY") AS "NB_TX_WINDOW_7", iff((("NB_FRAUD_DELAY_WINDOW_7" - "NB_FRAUD_DELAY") > 0 :: INT), (("NB_FRAUD_DELAY_WINDOW_7" - "NB_FRAUD_DELAY") / "NB_TX_WINDOW_7"), 0) AS "TERM_RISK_7", ("NB_TX_DELAY_WINDOW_30" - "NB_TX_DELAY") AS "NB_TX_WINDOW_30", iff((("NB_FRAUD_DELAY_WINDOW_30" - "NB_FRAUD_DELAY") > 0 :: INT), (("NB_FRAUD_DELAY_WINDOW_30" - "NB_FRAUD_DELAY") / "NB_TX_WINDOW_30"), 0) AS "TERM_RISK_30" FROM ( SELECT "TRANSACTION_ID", "CUSTOMER_ID", "l_hp82_TERMINAL_ID", "TX_DATETIME", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_FRAUD", "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND", "TX_DURING_NIGHT", "CUST_CNT_TX_1", "CUST_AVG_AMOUNT_1", "CUST_CNT_TX_7", "CUST_AVG_AMOUNT_7", "CUST_CNT_TX_30", "CUST_AVG_AMOUNT_30", "TX_DATE", "r_g8i3_TERMINAL_ID", "NO_TRX", "NB_FRAUD", "PARTITION_KEY", "CUR_DAY_TRX", "CUR_DAY_FRAUD", ("NB_TX_DELAY" + "CUR_DAY_TRX") AS "NB_TX_DELAY", ("NB_FRAUD_DELAY" + "CUR_DAY_FRAUD") AS "NB_FRAUD_DELAY", ("NB_TX_DELAY_WINDOW_1" + "CUR_DAY_TRX") AS "NB_TX_DELAY_WINDOW_1", ("NB_FRAUD_DELAY_WINDOW_1" + "CUR_DAY_FRAUD") AS "NB_FRAUD_DELAY_WINDOW_1", ("NB_TX_DELAY_WINDOW_7" + "CUR_DAY_TRX") AS "NB_TX_DELAY_WINDOW_7", ("NB_FRAUD_DELAY_WINDOW_7" + "CUR_DAY_FRAUD") AS "NB_FRAUD_DELAY_WINDOW_7", ("NB_TX_DELAY_WINDOW_30" + "CUR_DAY_TRX") AS "NB_TX_DELAY_WINDOW_30", ("NB_FRAUD_DELAY_WINDOW_30" + "CUR_DAY_FRAUD") AS "NB_FRAUD_DELAY_WINDOW_30" FROM ( SELECT "TRANSACTION_ID", "CUSTOMER_ID", "l_hp82_TERMINAL_ID", "TX_DATETIME", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_FRAUD", "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND", "TX_DURING_NIGHT", "CUST_CNT_TX_1", "CUST_AVG_AMOUNT_1", "CUST_CNT_TX_7", "CUST_AVG_AMOUNT_7", "CUST_CNT_TX_30", "CUST_AVG_AMOUNT_30", "TX_DATE", "r_g8i3_TERMINAL_ID", "NO_TRX", "NB_FRAUD", "NB_FRAUD_DELAY", "NB_TX_DELAY", "NB_TX_DELAY_WINDOW_1", "NB_TX_DELAY_WINDOW_7", "NB_TX_DELAY_WINDOW_30", "NB_FRAUD_DELAY_WINDOW_1", "NB_FRAUD_DELAY_WINDOW_7", "NB_FRAUD_DELAY_WINDOW_30", concat("l_hp82_TERMINAL_ID", to_date("TX_DATETIME")) AS "PARTITION_KEY", count("l_hp82_TERMINAL_ID") OVER (PARTITION BY "PARTITION_KEY"  ORDER BY "TX_DATETIME" ASC NULLS FIRST  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS "CUR_DAY_TRX", sum("TX_FRAUD") OVER (PARTITION BY "PARTITION_KEY"  ORDER BY "TX_DATETIME" ASC NULLS FIRST  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS "CUR_DAY_FRAUD" FROM ( SELECT  *  FROM (( SELECT "TRANSACTION_ID" AS "TRANSACTION_ID", "CUSTOMER_ID" AS "CUSTOMER_ID", "TERMINAL_ID" AS "l_hp82_TERMINAL_ID", "TX_DATETIME" AS "TX_DATETIME", "TX_AMOUNT" AS "TX_AMOUNT", "TX_TIME_SECONDS" AS "TX_TIME_SECONDS", "TX_TIME_DAYS" AS "TX_TIME_DAYS", "TX_FRAUD" AS "TX_FRAUD", "TX_FRAUD_SCENARIO" AS "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND" AS "TX_DURING_WEEKEND", "TX_DURING_NIGHT" AS "TX_DURING_NIGHT", "CUST_CNT_TX_1" AS "CUST_CNT_TX_1", "CUST_AVG_AMOUNT_1" AS "CUST_AVG_AMOUNT_1", "CUST_CNT_TX_7" AS "CUST_CNT_TX_7", "CUST_AVG_AMOUNT_7" AS "CUST_AVG_AMOUNT_7", "CUST_CNT_TX_30" AS "CUST_CNT_TX_30", "CUST_AVG_AMOUNT_30" AS "CUST_AVG_AMOUNT_30" FROM ( SELECT "TRANSACTION_ID", "l_squl_CUSTOMER_ID" AS "CUSTOMER_ID", "TERMINAL_ID", "TX_DATETIME" AS "TX_DATETIME", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_FRAUD", "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND", "TX_DURING_NIGHT", (ZEROIFNULL("CUST_TX_PREV_1") + "CUR_DAY_TRX") AS "CUST_CNT_TX_1", ((ZEROIFNULL("CUST_TOT_AMT_PREV_1") + "CUR_DAY_AMT") / "CUST_CNT_TX_1") AS "CUST_AVG_AMOUNT_1", (ZEROIFNULL("CUST_TX_PREV_7") + "CUR_DAY_TRX") AS "CUST_CNT_TX_7", ((ZEROIFNULL("CUST_TOT_AMT_PREV_7") + "CUR_DAY_AMT") / "CUST_CNT_TX_7") AS "CUST_AVG_AMOUNT_7", (ZEROIFNULL("CUST_TX_PREV_30") + "CUR_DAY_TRX") AS "CUST_CNT_TX_30", ((ZEROIFNULL("CUST_TOT_AMT_PREV_30") + "CUR_DAY_AMT") / "CUST_CNT_TX_30") AS "CUST_AVG_AMOUNT_30" FROM ( SELECT "TRANSACTION_ID", "TX_DATETIME", "l_squl_CUSTOMER_ID", "TERMINAL_ID", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_FRAUD", "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND", "TX_DURING_NIGHT", "TX_DATE", "r_hmmg_CUSTOMER_ID", "NO_TRX", "TOT_AMOUNT", "CUST_TX_PREV_1", "CUST_TX_PREV_7", "CUST_TX_PREV_30", "CUST_TOT_AMT_PREV_1", "CUST_TOT_AMT_PREV_7", "CUST_TOT_AMT_PREV_30", "PARTITION_KEY", count("l_squl_CUSTOMER_ID") OVER (PARTITION BY "PARTITION_KEY"  ORDER BY "TX_DATETIME" ASC NULLS FIRST  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS "CUR_DAY_TRX", sum("TX_AMOUNT") OVER (PARTITION BY "PARTITION_KEY"  ORDER BY "TX_DATETIME" ASC NULLS FIRST  RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS "CUR_DAY_AMT" FROM ( SELECT "TRANSACTION_ID", "TX_DATETIME", "l_squl_CUSTOMER_ID", "TERMINAL_ID", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_FRAUD", "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND", "TX_DURING_NIGHT", "TX_DATE", "r_hmmg_CUSTOMER_ID", "NO_TRX", "TOT_AMOUNT", "CUST_TX_PREV_1", "CUST_TX_PREV_7", "CUST_TX_PREV_30", "CUST_TOT_AMT_PREV_1", "CUST_TOT_AMT_PREV_7", "CUST_TOT_AMT_PREV_30", concat("l_squl_CUSTOMER_ID", to_date("TX_DATETIME")) AS "PARTITION_KEY" FROM ( SELECT  *  FROM (( SELECT "TRANSACTION_ID" AS "TRANSACTION_ID", "TX_DATETIME" AS "TX_DATETIME", "CUSTOMER_ID" AS "l_squl_CUSTOMER_ID", "TERMINAL_ID" AS "TERMINAL_ID", "TX_AMOUNT" AS "TX_AMOUNT", "TX_TIME_SECONDS" AS "TX_TIME_SECONDS", "TX_TIME_DAYS" AS "TX_TIME_DAYS", "TX_FRAUD" AS "TX_FRAUD", "TX_FRAUD_SCENARIO" AS "TX_FRAUD_SCENARIO", "TX_DURING_WEEKEND" AS "TX_DURING_WEEKEND", "TX_DURING_NIGHT" AS "TX_DURING_NIGHT" FROM ( SELECT "TRANSACTION_ID", "TX_DATETIME", "CUSTOMER_ID", "TERMINAL_ID", "TX_AMOUNT", "TX_TIME_SECONDS", "TX_TIME_DAYS", "TX_FRAUD", "TX_FRAUD_SCENARIO", iff(((dayofweek("TX_DATETIME") = 6 :: INT) OR (dayofweek("TX_DATETIME") = 0 :: INT)), 1, 0) AS "TX_DURING_WEEKEND", iff(((hour("TX_DATETIME") < 6 :: INT) OR (hour("TX_DATETIME") > 20 :: INT)), 1, 0) AS "TX_DURING_NIGHT" FROM CUSTOMER_TRANSACTIONS_FRAUD)) AS SNOWPARK_LEFT INNER JOIN ( SELECT "TX_DATE" AS "TX_DATE", "CUSTOMER_ID" AS "r_hmmg_CUSTOMER_ID", "NO_TRX" AS "NO_TRX", "TOT_AMOUNT" AS "TOT_AMOUNT", "CUST_TX_PREV_1" AS "CUST_TX_PREV_1", "CUST_TX_PREV_7" AS "CUST_TX_PREV_7", "CUST_TX_PREV_30" AS "CUST_TX_PREV_30", "CUST_TOT_AMT_PREV_1" AS "CUST_TOT_AMT_PREV_1", "CUST_TOT_AMT_PREV_7" AS "CUST_TOT_AMT_PREV_7", "CUST_TOT_AMT_PREV_30" AS "CUST_TOT_AMT_PREV_30" FROM ( SELECT "TX_DATE", "CUSTOMER_ID", "NO_TRX", "TOT_AMOUNT", LAG("NO_TRX", 1, NULL) OVER (PARTITION BY "CUSTOMER_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST ) AS "CUST_TX_PREV_1", sum("NO_TRX") OVER (PARTITION BY "CUSTOMER_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 7 PRECEDING  AND 1 PRECEDING  ) AS "CUST_TX_PREV_7", sum("NO_TRX") OVER (PARTITION BY "CUSTOMER_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 30 PRECEDING  AND 1 PRECEDING  ) AS "CUST_TX_PREV_30", LAG("TOT_AMOUNT", 1, NULL) OVER (PARTITION BY "CUSTOMER_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST ) AS "CUST_TOT_AMT_PREV_1", sum("TOT_AMOUNT") OVER (PARTITION BY "CUSTOMER_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 7 PRECEDING  AND 1 PRECEDING  ) AS "CUST_TOT_AMT_PREV_7", sum("TOT_AMOUNT") OVER (PARTITION BY "CUSTOMER_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 30 PRECEDING  AND 1 PRECEDING  ) AS "CUST_TOT_AMT_PREV_30" FROM ( SELECT "CUSTOMER_ID", "TX_DATE", sum("TX_AMOUNT") AS "TOT_AMOUNT", sum("NO_TRX") AS "NO_TRX" FROM ( SELECT "r_5bge_CUSTOMER_ID" AS "CUSTOMER_ID", "TX_DATE", ZEROIFNULL("TX_AMOUNT") AS "TX_AMOUNT", iff(("TX_AMOUNT" > 0 :: INT), 1, 0) AS "NO_TRX" FROM ( SELECT  *  FROM (( SELECT "TRANSACTION_ID" AS "TRANSACTION_ID", "TX_DATETIME" AS "TX_DATETIME", "CUSTOMER_ID" AS "l_idpf_CUSTOMER_ID", "TERMINAL_ID" AS "TERMINAL_ID", "TX_AMOUNT" AS "TX_AMOUNT", "TX_TIME_SECONDS" AS "TX_TIME_SECONDS", "TX_TIME_DAYS" AS "TX_TIME_DAYS", "TX_FRAUD" AS "TX_FRAUD", "TX_FRAUD_SCENARIO" AS "TX_FRAUD_SCENARIO" FROM CUSTOMER_TRANSACTIONS_FRAUD) AS SNOWPARK_LEFT RIGHT OUTER JOIN ( SELECT "ID" AS "ID", "TX_DATE" AS "TX_DATE", "CUSTOMER_ID" AS "r_5bge_CUSTOMER_ID" FROM ( SELECT  *  FROM (( SELECT "ID" AS "ID", "TX_DATE" AS "TX_DATE" FROM ( SELECT "ID", to_date(dateadd('DAY', seq4(0), '2019-04-01')) AS "TX_DATE" FROM ( SELECT ( ROW_NUMBER()  OVER ( ORDER BY  SEQ8() ) -  1 ) * (1) + (0) AS id FROM ( TABLE (GENERATOR(ROWCOUNT => 152)))))) AS SNOWPARK_LEFT INNER JOIN ( SELECT "CUSTOMER_ID" AS "CUSTOMER_ID" FROM CUSTOMERS) AS SNOWPARK_RIGHT))) AS SNOWPARK_RIGHT ON (("l_idpf_CUSTOMER_ID" = "r_5bge_CUSTOMER_ID") AND (to_date("TX_DATETIME") = "TX_DATE"))))) GROUP BY "CUSTOMER_ID", "TX_DATE"))) AS SNOWPARK_RIGHT ON (("l_squl_CUSTOMER_ID" = "r_hmmg_CUSTOMER_ID") AND (to_date("TX_DATETIME") = "TX_DATE")))))))) AS SNOWPARK_LEFT INNER JOIN ( SELECT "TX_DATE" AS "TX_DATE", "TERMINAL_ID" AS "r_g8i3_TERMINAL_ID", "NO_TRX" AS "NO_TRX", "NB_FRAUD" AS "NB_FRAUD", "NB_FRAUD_DELAY" AS "NB_FRAUD_DELAY", "NB_TX_DELAY" AS "NB_TX_DELAY", "NB_TX_DELAY_WINDOW_1" AS "NB_TX_DELAY_WINDOW_1", "NB_TX_DELAY_WINDOW_7" AS "NB_TX_DELAY_WINDOW_7", "NB_TX_DELAY_WINDOW_30" AS "NB_TX_DELAY_WINDOW_30", "NB_FRAUD_DELAY_WINDOW_1" AS "NB_FRAUD_DELAY_WINDOW_1", "NB_FRAUD_DELAY_WINDOW_7" AS "NB_FRAUD_DELAY_WINDOW_7", "NB_FRAUD_DELAY_WINDOW_30" AS "NB_FRAUD_DELAY_WINDOW_30" FROM ( SELECT "TX_DATE", "TERMINAL_ID", "NO_TRX", "NB_FRAUD", sum("NB_FRAUD") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 7 PRECEDING  AND 1 PRECEDING  ) AS "NB_FRAUD_DELAY", sum("NO_TRX") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 7 PRECEDING  AND 1 PRECEDING  ) AS "NB_TX_DELAY", sum("NO_TRX") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 8 PRECEDING  AND 1 PRECEDING  ) AS "NB_TX_DELAY_WINDOW_1", sum("NO_TRX") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 8 PRECEDING  AND 1 PRECEDING  ) AS "NB_TX_DELAY_WINDOW_7", sum("NO_TRX") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 37 PRECEDING  AND 1 PRECEDING  ) AS "NB_TX_DELAY_WINDOW_30", sum("NB_FRAUD") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 8 PRECEDING  AND 1 PRECEDING  ) AS "NB_FRAUD_DELAY_WINDOW_1", sum("NB_FRAUD") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 8 PRECEDING  AND 1 PRECEDING  ) AS "NB_FRAUD_DELAY_WINDOW_7", sum("NB_FRAUD") OVER (PARTITION BY "TERMINAL_ID"  ORDER BY "TX_DATE" ASC NULLS FIRST  ROWS BETWEEN 37 PRECEDING  AND 1 PRECEDING  ) AS "NB_FRAUD_DELAY_WINDOW_30" FROM ( SELECT "TERMINAL_ID", "TX_DATE", sum("NB_FRAUD") AS "NB_FRAUD", sum("NO_TRX") AS "NO_TRX" FROM ( SELECT "r_stuq_TERMINAL_ID" AS "TERMINAL_ID", "TX_DATE", ZEROIFNULL("TX_FRAUD") AS "NB_FRAUD",  CASE  WHEN "TX_FRAUD" IS NULL THEN 0 :: INT ELSE 1 :: INT END  AS "NO_TRX" FROM ( SELECT  *  FROM (( SELECT "TRANSACTION_ID" AS "TRANSACTION_ID", "TX_DATETIME" AS "TX_DATETIME", "CUSTOMER_ID" AS "CUSTOMER_ID", "TERMINAL_ID" AS "l_liq9_TERMINAL_ID", "TX_AMOUNT" AS "TX_AMOUNT", "TX_TIME_SECONDS" AS "TX_TIME_SECONDS", "TX_TIME_DAYS" AS "TX_TIME_DAYS", "TX_FRAUD" AS "TX_FRAUD", "TX_FRAUD_SCENARIO" AS "TX_FRAUD_SCENARIO" FROM CUSTOMER_TRANSACTIONS_FRAUD) AS SNOWPARK_LEFT RIGHT OUTER JOIN ( SELECT "ID" AS "ID", "TX_DATE" AS "TX_DATE", "TERMINAL_ID" AS "r_stuq_TERMINAL_ID" FROM ( SELECT  *  FROM (( SELECT "ID" AS "ID", "TX_DATE" AS "TX_DATE" FROM ( SELECT "ID", to_date(dateadd('DAY', seq4(0), '2019-04-01')) AS "TX_DATE" FROM ( SELECT ( ROW_NUMBER()  OVER ( ORDER BY  SEQ8() ) -  1 ) * (1) + (0) AS id FROM ( TABLE (GENERATOR(ROWCOUNT => 152)))))) AS SNOWPARK_LEFT INNER JOIN ( SELECT "TERMINAL_ID" AS "TERMINAL_ID" FROM TERMINALS) AS SNOWPARK_RIGHT))) AS SNOWPARK_RIGHT ON (("l_liq9_TERMINAL_ID" = "r_stuq_TERMINAL_ID") AND (to_date("TX_DATETIME") = "TX_DATE"))))) GROUP BY "TERMINAL_ID", "TX_DATE"))) AS SNOWPARK_RIGHT ON (("l_hp82_TERMINAL_ID" = "r_g8i3_TERMINAL_ID") AND (to_date("TX_DATETIME") = "TX_DATE"))))))
Logical Execution Plan:
GlobalStats:
    partitionsTotal=5
    partitionsAssigned=5
    bytesAssigned=44270592
Operations:
1:0     ->Result  CUSTOMER_TRANSACTIONS_FRAUD.TRANSACTION_ID, CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME, CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID, CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID, CUSTOMER_TRANSACTIONS_FRAUD.TX_TIME_SECONDS, CUSTOMER_TRANSACTIONS_FRAUD.TX_TIME_DAYS, CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT, CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD, CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD_SCENARIO, IFF(((EXTRACT(dayofweek from CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME)) = 6) OR ((EXTRACT(dayofweek from CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME)) = 0), 1, 0), IFF(((EXTRACT(hour from CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME)) < 6) OR ((EXTRACT(hour from CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME)) > 20), 1, 0), ((ZEROIFNULL(LAG(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT)), 1, null) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)) / (TO_DOUBLE((ZEROIFNULL(LAG(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0)), 1, null) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)))), (ZEROIFNULL(LAG(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0)), 1, null) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)), ((ZEROIFNULL(SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)) / (TO_DOUBLE((ZEROIFNULL(SUM(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)))), (ZEROIFNULL(SUM(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)), ((ZEROIFNULL(SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)) / (TO_DOUBLE((ZEROIFNULL(SUM(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)))), (ZEROIFNULL(SUM(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST))) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)), ((SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))) - ((SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))), IFF(((SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)) - (SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))) > 0, SCALED_ROUND_INT_DIVIDE((SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OV..., ((SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))) - ((SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))), IFF(((SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)) - (SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))) > 0, SCALED_ROUND_INT_DIVIDE((SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OV..., ((SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))) - ((SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)) + (COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))), IFF(((SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)) - (SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST) + SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST))) > 0, SCALED_ROUND_INT_DIVIDE((SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OV...  
1:1          ->WindowFunction  COUNT(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST), SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)  
1:2               ->InnerJoin  joinKey: (TERMINALS.TERMINAL_ID = CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) AND (TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) = TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))  
1:3                    ->WindowFunction  SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD))) OVER (PARTITION BY TERMINALS.TERMINAL_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)  
1:4                         ->Aggregate  aggExprs: [SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD)), SUM(IFF(CUSTOMER_TRANSACTIONS_FRAUD.TX_FRAUD IS NULL, 0, 1))], groupKeys: [TERMINALS.TERMINAL_ID, TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z'))]  
1:5                              ->LeftOuterJoin  joinKey: (CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID = TERMINALS.TERMINAL_ID) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) = TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')))  
1:6                                   ->Filter  (CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID IS NOT NULL) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) IS NOT NULL)  
1:7                                        ->TableScan  TEST.PUBLIC.CUSTOMER_TRANSACTIONS_FRAUD  TX_DATETIME, TERMINAL_ID, TX_FRAUD  {partitionsTotal=1, partitionsAssigned=1, bytesAssigned=14747648}
1:8                                   ->CartesianJoin  
1:9                                        ->TableScan  TEST.PUBLIC.TERMINALS  TERMINAL_ID  {partitionsTotal=1, partitionsAssigned=1, bytesAssigned=18432}
1:10                                        ->Generator  152  
1:11                    ->JoinFilter  joinKey: (TERMINALS.TERMINAL_ID = CUSTOMER_TRANSACTIONS_FRAUD.TERMINAL_ID) AND (TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) = TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))  
1:12                         ->WindowFunction  COUNT(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST), SUM(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) OVER (PARTITION BY CONCAT(TO_CHAR(CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID), TO_CHAR(TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME))) ORDER BY CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME ASC NULLS FIRST)  
1:13                              ->InnerJoin  joinKey: (CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) = TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')))  
1:14                                   ->TableScan  TEST.PUBLIC.CUSTOMER_TRANSACTIONS_FRAUD  TRANSACTION_ID, TX_DATETIME, CUSTOMER_ID, TERMINAL_ID, TX_AMOUNT, TX_TIME_SECONDS, TX_TIME_DAYS, TX_FRAUD, TX_FRAUD_SCENARIO  {partitionsTotal=1, partitionsAssigned=1, bytesAssigned=14747648}
1:15                                   ->JoinFilter  joinKey: (CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) = TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')))  
1:16                                        ->WindowFunction  LAG(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0)), 1, null) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), LAG(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT)), 1, null) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST), SUM(SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT))) OVER (PARTITION BY CUSTOMERS.CUSTOMER_ID ORDER BY TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')) ASC NULLS FIRST)  
1:17                                             ->Aggregate  aggExprs: [SUM(ZEROIFNULL(CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT)), SUM(IFF((CUSTOMER_TRANSACTIONS_FRAUD.TX_AMOUNT) > 0.0, 1, 0))], groupKeys: [CUSTOMERS.CUSTOMER_ID, TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z'))]  
1:18                                                  ->LeftOuterJoin  joinKey: (CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) = TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')))  
1:19                                                       ->Filter  (CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID IS NOT NULL) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) IS NOT NULL)  
1:20                                                            ->JoinFilter  joinKey: (CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) = TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')))  
1:21                                                                 ->TableScan  TEST.PUBLIC.CUSTOMER_TRANSACTIONS_FRAUD  TX_DATETIME, CUSTOMER_ID, TX_AMOUNT  {partitionsTotal=1, partitionsAssigned=1, bytesAssigned=14747648}
1:22                                                       ->CartesianJoin  
1:23                                                            ->JoinFilter  joinKey: (CUSTOMER_TRANSACTIONS_FRAUD.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID) AND (TO_DATE(CUSTOMER_TRANSACTIONS_FRAUD.TX_DATETIME) = TO_DATE(DATE_ADDDAYSTOTIMESTAMP(SEQ4(0), '2019-04-01 00:00:00.000000000Z')))  
1:24                                                                 ->TableScan  TEST.PUBLIC.CUSTOMERS  CUSTOMER_ID  {partitionsTotal=1, partitionsAssigned=1, bytesAssigned=9216}
1:25                                                            ->Generator  152  

--------------------------------------------
